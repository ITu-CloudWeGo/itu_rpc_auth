// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package auth_service

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *GenerateTokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenerateTokenRequest[number], err)
}

func (x *GenerateTokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GenerateTokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenerateTokenResponse[number], err)
}

func (x *GenerateTokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenerateTokenResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.RefreshToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenerateTokenResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccessTokenExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GenerateTokenResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.RefreshTokenExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefreshTokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefreshTokenRequest[number], err)
}

func (x *RefreshTokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.RefreshToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefreshTokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefreshTokenResponse[number], err)
}

func (x *RefreshTokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefreshTokenResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.RefreshToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefreshTokenResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccessTokenExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefreshTokenResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.RefreshTokenExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CheckAccessTokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CheckAccessTokenRequest[number], err)
}

func (x *CheckAccessTokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CheckAccessTokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CheckAccessTokenResponse[number], err)
}

func (x *CheckAccessTokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CheckAccessExpiresAt, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CheckRefreshTokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CheckRefreshTokenRequest[number], err)
}

func (x *CheckRefreshTokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.RefreshToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CheckRefreshTokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CheckRefreshTokenResponse[number], err)
}

func (x *CheckRefreshTokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CheckRefreshExpiresAt, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *EmailRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailRequest[number], err)
}

func (x *EmailRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EmailResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailResponse[number], err)
}

func (x *EmailResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Captcha, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GenerateTokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GenerateTokenRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *GenerateTokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GenerateTokenResponse) fastWriteField1(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken())
	return offset
}

func (x *GenerateTokenResponse) fastWriteField2(buf []byte) (offset int) {
	if x.RefreshToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetRefreshToken())
	return offset
}

func (x *GenerateTokenResponse) fastWriteField3(buf []byte) (offset int) {
	if x.AccessTokenExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetAccessTokenExpire())
	return offset
}

func (x *GenerateTokenResponse) fastWriteField4(buf []byte) (offset int) {
	if x.RefreshTokenExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetRefreshTokenExpire())
	return offset
}

func (x *RefreshTokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RefreshTokenRequest) fastWriteField1(buf []byte) (offset int) {
	if x.RefreshToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetRefreshToken())
	return offset
}

func (x *RefreshTokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *RefreshTokenResponse) fastWriteField1(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken())
	return offset
}

func (x *RefreshTokenResponse) fastWriteField2(buf []byte) (offset int) {
	if x.RefreshToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetRefreshToken())
	return offset
}

func (x *RefreshTokenResponse) fastWriteField3(buf []byte) (offset int) {
	if x.AccessTokenExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetAccessTokenExpire())
	return offset
}

func (x *RefreshTokenResponse) fastWriteField4(buf []byte) (offset int) {
	if x.RefreshTokenExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetRefreshTokenExpire())
	return offset
}

func (x *CheckAccessTokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CheckAccessTokenRequest) fastWriteField1(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken())
	return offset
}

func (x *CheckAccessTokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CheckAccessTokenResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.CheckAccessExpiresAt {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetCheckAccessExpiresAt())
	return offset
}

func (x *CheckRefreshTokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CheckRefreshTokenRequest) fastWriteField1(buf []byte) (offset int) {
	if x.RefreshToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetRefreshToken())
	return offset
}

func (x *CheckRefreshTokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CheckRefreshTokenResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.CheckRefreshExpiresAt {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetCheckRefreshExpiresAt())
	return offset
}

func (x *EmailRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *EmailRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail())
	return offset
}

func (x *EmailResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *EmailResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Captcha == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCaptcha())
	return offset
}

func (x *GenerateTokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GenerateTokenRequest) sizeField1() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetUid())
	return n
}

func (x *GenerateTokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GenerateTokenResponse) sizeField1() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAccessToken())
	return n
}

func (x *GenerateTokenResponse) sizeField2() (n int) {
	if x.RefreshToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetRefreshToken())
	return n
}

func (x *GenerateTokenResponse) sizeField3() (n int) {
	if x.AccessTokenExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetAccessTokenExpire())
	return n
}

func (x *GenerateTokenResponse) sizeField4() (n int) {
	if x.RefreshTokenExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetRefreshTokenExpire())
	return n
}

func (x *RefreshTokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RefreshTokenRequest) sizeField1() (n int) {
	if x.RefreshToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetRefreshToken())
	return n
}

func (x *RefreshTokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *RefreshTokenResponse) sizeField1() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAccessToken())
	return n
}

func (x *RefreshTokenResponse) sizeField2() (n int) {
	if x.RefreshToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetRefreshToken())
	return n
}

func (x *RefreshTokenResponse) sizeField3() (n int) {
	if x.AccessTokenExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetAccessTokenExpire())
	return n
}

func (x *RefreshTokenResponse) sizeField4() (n int) {
	if x.RefreshTokenExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetRefreshTokenExpire())
	return n
}

func (x *CheckAccessTokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CheckAccessTokenRequest) sizeField1() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAccessToken())
	return n
}

func (x *CheckAccessTokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CheckAccessTokenResponse) sizeField1() (n int) {
	if !x.CheckAccessExpiresAt {
		return n
	}
	n += fastpb.SizeBool(1, x.GetCheckAccessExpiresAt())
	return n
}

func (x *CheckRefreshTokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CheckRefreshTokenRequest) sizeField1() (n int) {
	if x.RefreshToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetRefreshToken())
	return n
}

func (x *CheckRefreshTokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CheckRefreshTokenResponse) sizeField1() (n int) {
	if !x.CheckRefreshExpiresAt {
		return n
	}
	n += fastpb.SizeBool(1, x.GetCheckRefreshExpiresAt())
	return n
}

func (x *EmailRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *EmailRequest) sizeField1() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEmail())
	return n
}

func (x *EmailResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *EmailResponse) sizeField1() (n int) {
	if x.Captcha == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCaptcha())
	return n
}

var fieldIDToName_GenerateTokenRequest = map[int32]string{
	1: "Uid",
}

var fieldIDToName_GenerateTokenResponse = map[int32]string{
	1: "AccessToken",
	2: "RefreshToken",
	3: "AccessTokenExpire",
	4: "RefreshTokenExpire",
}

var fieldIDToName_RefreshTokenRequest = map[int32]string{
	1: "RefreshToken",
}

var fieldIDToName_RefreshTokenResponse = map[int32]string{
	1: "AccessToken",
	2: "RefreshToken",
	3: "AccessTokenExpire",
	4: "RefreshTokenExpire",
}

var fieldIDToName_CheckAccessTokenRequest = map[int32]string{
	1: "AccessToken",
}

var fieldIDToName_CheckAccessTokenResponse = map[int32]string{
	1: "CheckAccessExpiresAt",
}

var fieldIDToName_CheckRefreshTokenRequest = map[int32]string{
	1: "RefreshToken",
}

var fieldIDToName_CheckRefreshTokenResponse = map[int32]string{
	1: "CheckRefreshExpiresAt",
}

var fieldIDToName_EmailRequest = map[int32]string{
	1: "Email",
}

var fieldIDToName_EmailResponse = map[int32]string{
	1: "Captcha",
}
