// Code generated by Kitex v0.12.3. DO NOT EDIT.

package authservice

import (
	"context"
	"errors"
	auth_service "github.com/ITu-CloudWeGo/itu_rpc_auth/rpc/kitex_gen/auth_service"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GenerateToken": kitex.NewMethodInfo(
		generateTokenHandler,
		newGenerateTokenArgs,
		newGenerateTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RefreshToken": kitex.NewMethodInfo(
		refreshTokenHandler,
		newRefreshTokenArgs,
		newRefreshTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CheckAccessToken": kitex.NewMethodInfo(
		checkAccessTokenHandler,
		newCheckAccessTokenArgs,
		newCheckAccessTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CheckRefreshToken": kitex.NewMethodInfo(
		checkRefreshTokenHandler,
		newCheckRefreshTokenArgs,
		newCheckRefreshTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Email": kitex.NewMethodInfo(
		emailHandler,
		newEmailArgs,
		newEmailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	authServiceServiceInfo                = NewServiceInfo()
	authServiceServiceInfoForClient       = NewServiceInfoForClient()
	authServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*auth_service.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func generateTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth_service.GenerateTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth_service.AuthService).GenerateToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GenerateTokenArgs:
		success, err := handler.(auth_service.AuthService).GenerateToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GenerateTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGenerateTokenArgs() interface{} {
	return &GenerateTokenArgs{}
}

func newGenerateTokenResult() interface{} {
	return &GenerateTokenResult{}
}

type GenerateTokenArgs struct {
	Req *auth_service.GenerateTokenRequest
}

func (p *GenerateTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth_service.GenerateTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GenerateTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GenerateTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GenerateTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GenerateTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth_service.GenerateTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GenerateTokenArgs_Req_DEFAULT *auth_service.GenerateTokenRequest

func (p *GenerateTokenArgs) GetReq() *auth_service.GenerateTokenRequest {
	if !p.IsSetReq() {
		return GenerateTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GenerateTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenerateTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GenerateTokenResult struct {
	Success *auth_service.GenerateTokenResponse
}

var GenerateTokenResult_Success_DEFAULT *auth_service.GenerateTokenResponse

func (p *GenerateTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth_service.GenerateTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GenerateTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GenerateTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GenerateTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GenerateTokenResult) Unmarshal(in []byte) error {
	msg := new(auth_service.GenerateTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GenerateTokenResult) GetSuccess() *auth_service.GenerateTokenResponse {
	if !p.IsSetSuccess() {
		return GenerateTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GenerateTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth_service.GenerateTokenResponse)
}

func (p *GenerateTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenerateTokenResult) GetResult() interface{} {
	return p.Success
}

func refreshTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth_service.RefreshTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth_service.AuthService).RefreshToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RefreshTokenArgs:
		success, err := handler.(auth_service.AuthService).RefreshToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RefreshTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRefreshTokenArgs() interface{} {
	return &RefreshTokenArgs{}
}

func newRefreshTokenResult() interface{} {
	return &RefreshTokenResult{}
}

type RefreshTokenArgs struct {
	Req *auth_service.RefreshTokenRequest
}

func (p *RefreshTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth_service.RefreshTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RefreshTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RefreshTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RefreshTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RefreshTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth_service.RefreshTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RefreshTokenArgs_Req_DEFAULT *auth_service.RefreshTokenRequest

func (p *RefreshTokenArgs) GetReq() *auth_service.RefreshTokenRequest {
	if !p.IsSetReq() {
		return RefreshTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RefreshTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RefreshTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RefreshTokenResult struct {
	Success *auth_service.RefreshTokenResponse
}

var RefreshTokenResult_Success_DEFAULT *auth_service.RefreshTokenResponse

func (p *RefreshTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth_service.RefreshTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RefreshTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RefreshTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RefreshTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RefreshTokenResult) Unmarshal(in []byte) error {
	msg := new(auth_service.RefreshTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RefreshTokenResult) GetSuccess() *auth_service.RefreshTokenResponse {
	if !p.IsSetSuccess() {
		return RefreshTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RefreshTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth_service.RefreshTokenResponse)
}

func (p *RefreshTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RefreshTokenResult) GetResult() interface{} {
	return p.Success
}

func checkAccessTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth_service.CheckAccessTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth_service.AuthService).CheckAccessToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckAccessTokenArgs:
		success, err := handler.(auth_service.AuthService).CheckAccessToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckAccessTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckAccessTokenArgs() interface{} {
	return &CheckAccessTokenArgs{}
}

func newCheckAccessTokenResult() interface{} {
	return &CheckAccessTokenResult{}
}

type CheckAccessTokenArgs struct {
	Req *auth_service.CheckAccessTokenRequest
}

func (p *CheckAccessTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth_service.CheckAccessTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckAccessTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckAccessTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckAccessTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckAccessTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth_service.CheckAccessTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckAccessTokenArgs_Req_DEFAULT *auth_service.CheckAccessTokenRequest

func (p *CheckAccessTokenArgs) GetReq() *auth_service.CheckAccessTokenRequest {
	if !p.IsSetReq() {
		return CheckAccessTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckAccessTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckAccessTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckAccessTokenResult struct {
	Success *auth_service.CheckAccessTokenResponse
}

var CheckAccessTokenResult_Success_DEFAULT *auth_service.CheckAccessTokenResponse

func (p *CheckAccessTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth_service.CheckAccessTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckAccessTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckAccessTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckAccessTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckAccessTokenResult) Unmarshal(in []byte) error {
	msg := new(auth_service.CheckAccessTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckAccessTokenResult) GetSuccess() *auth_service.CheckAccessTokenResponse {
	if !p.IsSetSuccess() {
		return CheckAccessTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckAccessTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth_service.CheckAccessTokenResponse)
}

func (p *CheckAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckAccessTokenResult) GetResult() interface{} {
	return p.Success
}

func checkRefreshTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth_service.CheckRefreshTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth_service.AuthService).CheckRefreshToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckRefreshTokenArgs:
		success, err := handler.(auth_service.AuthService).CheckRefreshToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckRefreshTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckRefreshTokenArgs() interface{} {
	return &CheckRefreshTokenArgs{}
}

func newCheckRefreshTokenResult() interface{} {
	return &CheckRefreshTokenResult{}
}

type CheckRefreshTokenArgs struct {
	Req *auth_service.CheckRefreshTokenRequest
}

func (p *CheckRefreshTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth_service.CheckRefreshTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckRefreshTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckRefreshTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckRefreshTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckRefreshTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth_service.CheckRefreshTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckRefreshTokenArgs_Req_DEFAULT *auth_service.CheckRefreshTokenRequest

func (p *CheckRefreshTokenArgs) GetReq() *auth_service.CheckRefreshTokenRequest {
	if !p.IsSetReq() {
		return CheckRefreshTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckRefreshTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckRefreshTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckRefreshTokenResult struct {
	Success *auth_service.CheckRefreshTokenResponse
}

var CheckRefreshTokenResult_Success_DEFAULT *auth_service.CheckRefreshTokenResponse

func (p *CheckRefreshTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth_service.CheckRefreshTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckRefreshTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckRefreshTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckRefreshTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckRefreshTokenResult) Unmarshal(in []byte) error {
	msg := new(auth_service.CheckRefreshTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckRefreshTokenResult) GetSuccess() *auth_service.CheckRefreshTokenResponse {
	if !p.IsSetSuccess() {
		return CheckRefreshTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckRefreshTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth_service.CheckRefreshTokenResponse)
}

func (p *CheckRefreshTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckRefreshTokenResult) GetResult() interface{} {
	return p.Success
}

func emailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth_service.EmailRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth_service.AuthService).Email(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *EmailArgs:
		success, err := handler.(auth_service.AuthService).Email(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*EmailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newEmailArgs() interface{} {
	return &EmailArgs{}
}

func newEmailResult() interface{} {
	return &EmailResult{}
}

type EmailArgs struct {
	Req *auth_service.EmailRequest
}

func (p *EmailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth_service.EmailRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EmailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EmailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EmailArgs) Unmarshal(in []byte) error {
	msg := new(auth_service.EmailRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EmailArgs_Req_DEFAULT *auth_service.EmailRequest

func (p *EmailArgs) GetReq() *auth_service.EmailRequest {
	if !p.IsSetReq() {
		return EmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EmailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EmailResult struct {
	Success *auth_service.EmailResponse
}

var EmailResult_Success_DEFAULT *auth_service.EmailResponse

func (p *EmailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth_service.EmailResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EmailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EmailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EmailResult) Unmarshal(in []byte) error {
	msg := new(auth_service.EmailResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EmailResult) GetSuccess() *auth_service.EmailResponse {
	if !p.IsSetSuccess() {
		return EmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth_service.EmailResponse)
}

func (p *EmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GenerateToken(ctx context.Context, Req *auth_service.GenerateTokenRequest) (r *auth_service.GenerateTokenResponse, err error) {
	var _args GenerateTokenArgs
	_args.Req = Req
	var _result GenerateTokenResult
	if err = p.c.Call(ctx, "GenerateToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefreshToken(ctx context.Context, Req *auth_service.RefreshTokenRequest) (r *auth_service.RefreshTokenResponse, err error) {
	var _args RefreshTokenArgs
	_args.Req = Req
	var _result RefreshTokenResult
	if err = p.c.Call(ctx, "RefreshToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckAccessToken(ctx context.Context, Req *auth_service.CheckAccessTokenRequest) (r *auth_service.CheckAccessTokenResponse, err error) {
	var _args CheckAccessTokenArgs
	_args.Req = Req
	var _result CheckAccessTokenResult
	if err = p.c.Call(ctx, "CheckAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckRefreshToken(ctx context.Context, Req *auth_service.CheckRefreshTokenRequest) (r *auth_service.CheckRefreshTokenResponse, err error) {
	var _args CheckRefreshTokenArgs
	_args.Req = Req
	var _result CheckRefreshTokenResult
	if err = p.c.Call(ctx, "CheckRefreshToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Email(ctx context.Context, Req *auth_service.EmailRequest) (r *auth_service.EmailResponse, err error) {
	var _args EmailArgs
	_args.Req = Req
	var _result EmailResult
	if err = p.c.Call(ctx, "Email", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
