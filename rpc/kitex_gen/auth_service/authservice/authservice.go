// Code generated by Kitex v0.12.3. DO NOT EDIT.

package authservice

import (
	"context"
	"errors"
	auth_service "github.com/ITu-CloudWeGo/itu_rpc_auth/rpc/kitex_gen/auth_service"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateAuth": kitex.NewMethodInfo(
		createAuthHandler,
		newCreateAuthArgs,
		newCreateAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateAuth": kitex.NewMethodInfo(
		updateAuthHandler,
		newUpdateAuthArgs,
		newUpdateAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Email": kitex.NewMethodInfo(
		emailHandler,
		newEmailArgs,
		newEmailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	authServiceServiceInfo                = NewServiceInfo()
	authServiceServiceInfoForClient       = NewServiceInfoForClient()
	authServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*auth_service.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func createAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth_service.CreateAuthReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth_service.AuthService).CreateAuth(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateAuthArgs:
		success, err := handler.(auth_service.AuthService).CreateAuth(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateAuthResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateAuthArgs() interface{} {
	return &CreateAuthArgs{}
}

func newCreateAuthResult() interface{} {
	return &CreateAuthResult{}
}

type CreateAuthArgs struct {
	Req *auth_service.CreateAuthReq
}

func (p *CreateAuthArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth_service.CreateAuthReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateAuthArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateAuthArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateAuthArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateAuthArgs) Unmarshal(in []byte) error {
	msg := new(auth_service.CreateAuthReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateAuthArgs_Req_DEFAULT *auth_service.CreateAuthReq

func (p *CreateAuthArgs) GetReq() *auth_service.CreateAuthReq {
	if !p.IsSetReq() {
		return CreateAuthArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateAuthArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateAuthResult struct {
	Success *auth_service.CreateAuthResp
}

var CreateAuthResult_Success_DEFAULT *auth_service.CreateAuthResp

func (p *CreateAuthResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth_service.CreateAuthResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateAuthResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateAuthResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateAuthResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateAuthResult) Unmarshal(in []byte) error {
	msg := new(auth_service.CreateAuthResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateAuthResult) GetSuccess() *auth_service.CreateAuthResp {
	if !p.IsSetSuccess() {
		return CreateAuthResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth_service.CreateAuthResp)
}

func (p *CreateAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateAuthResult) GetResult() interface{} {
	return p.Success
}

func updateAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth_service.UpdateAuthReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth_service.AuthService).UpdateAuth(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateAuthArgs:
		success, err := handler.(auth_service.AuthService).UpdateAuth(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateAuthResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateAuthArgs() interface{} {
	return &UpdateAuthArgs{}
}

func newUpdateAuthResult() interface{} {
	return &UpdateAuthResult{}
}

type UpdateAuthArgs struct {
	Req *auth_service.UpdateAuthReq
}

func (p *UpdateAuthArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth_service.UpdateAuthReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateAuthArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateAuthArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateAuthArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateAuthArgs) Unmarshal(in []byte) error {
	msg := new(auth_service.UpdateAuthReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateAuthArgs_Req_DEFAULT *auth_service.UpdateAuthReq

func (p *UpdateAuthArgs) GetReq() *auth_service.UpdateAuthReq {
	if !p.IsSetReq() {
		return UpdateAuthArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateAuthArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateAuthResult struct {
	Success *auth_service.UpdateAuthResp
}

var UpdateAuthResult_Success_DEFAULT *auth_service.UpdateAuthResp

func (p *UpdateAuthResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth_service.UpdateAuthResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateAuthResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateAuthResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateAuthResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateAuthResult) Unmarshal(in []byte) error {
	msg := new(auth_service.UpdateAuthResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateAuthResult) GetSuccess() *auth_service.UpdateAuthResp {
	if !p.IsSetSuccess() {
		return UpdateAuthResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth_service.UpdateAuthResp)
}

func (p *UpdateAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateAuthResult) GetResult() interface{} {
	return p.Success
}

func emailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth_service.EmailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth_service.AuthService).Email(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *EmailArgs:
		success, err := handler.(auth_service.AuthService).Email(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*EmailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newEmailArgs() interface{} {
	return &EmailArgs{}
}

func newEmailResult() interface{} {
	return &EmailResult{}
}

type EmailArgs struct {
	Req *auth_service.EmailReq
}

func (p *EmailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth_service.EmailReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EmailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EmailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EmailArgs) Unmarshal(in []byte) error {
	msg := new(auth_service.EmailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EmailArgs_Req_DEFAULT *auth_service.EmailReq

func (p *EmailArgs) GetReq() *auth_service.EmailReq {
	if !p.IsSetReq() {
		return EmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EmailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EmailResult struct {
	Success *auth_service.EmailResp
}

var EmailResult_Success_DEFAULT *auth_service.EmailResp

func (p *EmailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth_service.EmailResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EmailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EmailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EmailResult) Unmarshal(in []byte) error {
	msg := new(auth_service.EmailResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EmailResult) GetSuccess() *auth_service.EmailResp {
	if !p.IsSetSuccess() {
		return EmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth_service.EmailResp)
}

func (p *EmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateAuth(ctx context.Context, Req *auth_service.CreateAuthReq) (r *auth_service.CreateAuthResp, err error) {
	var _args CreateAuthArgs
	_args.Req = Req
	var _result CreateAuthResult
	if err = p.c.Call(ctx, "CreateAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateAuth(ctx context.Context, Req *auth_service.UpdateAuthReq) (r *auth_service.UpdateAuthResp, err error) {
	var _args UpdateAuthArgs
	_args.Req = Req
	var _result UpdateAuthResult
	if err = p.c.Call(ctx, "UpdateAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Email(ctx context.Context, Req *auth_service.EmailReq) (r *auth_service.EmailResp, err error) {
	var _args EmailArgs
	_args.Req = Req
	var _result EmailResult
	if err = p.c.Call(ctx, "Email", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
